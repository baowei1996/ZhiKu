/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zhiku.notify;

import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.zhiku.token.Token;
import com.zhiku.user.User;
import com.zhiku.util.Data;
import com.zhiku.util.RMessage;

/** 
 * MyEclipse Struts
 * Creation date: 05-08-2018
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @author baowei
 */
public class GetNotificationsAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		response.setContentType("application/json;charset=utf-8");
		response.setHeader("pragme", "no-cache");
		response.setHeader("Access-Control-Allow-Credentials", "true");
		response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin"));
		PrintWriter out = null;
		
		RMessage rmsg = new RMessage();
		try{
			out = response.getWriter();
			
			
//			//获取用户的session，判断用户的登录状态
//			HttpSession session = request.getSession();
//			int uid ;
//			try{
//				uid = session.getAttribute("uid")==null?-1:(Integer)session.getAttribute("uid");
//			}catch(Exception e){
//				uid = -1;
//			}
//			
//			if (uid == -1){
//				rmsg.setStatus(300);
//				rmsg.setMessage("请先登录!");
//				return null;
//			}
			
			//token验证
			String token = request.getParameter("token");
			if(token != null){
				int status = Token.testToken(token);
				if(status == Token.OVERTIME){
					rmsg.setStatus(401);
					rmsg.setMessage("认证过期，请重新登录!");
					out.write(RMessage.getJson(rmsg));
					return null;
				}else if(status != Token.NORMAL){
					rmsg.setStatus(300);
					rmsg.setMessage("验证失败,请尝试重新登录!");
					out.write(RMessage.getJson(rmsg));
					return null;
				}
			}else{
				rmsg.setStatus(300);
				rmsg.setMessage("请先登录!");
				out.write(RMessage.getJson(rmsg));
				return null;
			}
			
			
			int uid = (Integer)Token.getPayload(token.substring(token.indexOf('.')+1, token.lastIndexOf('.'))).get("uid");
			
			String url = request.getRequestURL().toString();
			String username = url.substring(url.lastIndexOf("/")+1, url.lastIndexOf("."));
			User u = User.findByUid(uid);
		
			if(u == null || !u.getUsr().equals(username)){
				rmsg.setStatus(300);
				rmsg.setMessage("错误的用户");
			}else{		//检查通知
				List<Notification> ns = NotificationService.getNotifications(u.getUsr());
				
				if(ns != null){
					
					rmsg.setStatus(200);
					rmsg.setMessage("OK");
					
					List<Data> data = new ArrayList<Data>();
					Data d = null;
					for(Notification n:ns){
						d = new Data();
						d.put("title", n.getTitle());
						d.put("time", new SimpleDateFormat("yyyy-MM-dd HH:mm").format(n.getNtime()));
						d.put("content", n.getContent());
						d.put("from", n.getFrom());
						d.put("read", n.getRead()==Notification.READ);
						d.put("nid", n.getNid());
						
						data.add(d);
					}
					rmsg.setData(data);
				}
				
			}
			
			
		}catch(Exception e){
			rmsg.setStatus(300);
			rmsg.setMessage(e.getCause().toString());
		}finally{
			out.write(RMessage.getJson(rmsg));
			out.flush();
			out.close();
		}
		return null;
		
	}
}